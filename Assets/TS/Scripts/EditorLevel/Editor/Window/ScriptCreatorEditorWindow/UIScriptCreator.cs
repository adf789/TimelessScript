
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEngine;

public class UIScriptCreator : BaseScriptCreator
{
    private enum UIScriptType
    {
        View,
        Popup,
        Unit,
    }

    private UIScriptType selectedUIType;
    private string typeEnumPath = "Assets/TS/Scripts/LowLevel/Enum/UIEnum.cs";

    public override void Create(string addPath, string assetName)
    {
        if (string.IsNullOrEmpty(assetName))
        {
            Debug.LogError("Create script name cannot be empty.");
            return;
        }

        string modelPath = string.Format(StringDefine.PATH_SCRIPT, $"LowLevel/Model/{selectedUIType}");
        string viewPath = string.Format(StringDefine.PATH_SCRIPT, $"MiddleLevel/View/{selectedUIType}");
        string createPrefabPath = string.Format(StringDefine.PATH_VIEW_PREFAB, selectedUIType);
        string createViewName = $"{assetName}{selectedUIType}";
        string createModelName = $"{assetName}{selectedUIType}Model";

        if(!string.IsNullOrEmpty(addPath))
            modelPath = Path.Combine(modelPath, addPath);

        if (!string.IsNullOrEmpty(addPath))
            viewPath = Path.Combine(viewPath, addPath);

        if (!string.IsNullOrEmpty(addPath))
            createPrefabPath = Path.Combine(createPrefabPath, addPath);

        CreateDirectoryIfNotExist(modelPath);
        CreateDirectoryIfNotExist(viewPath);
        CreateDirectoryIfNotExist(createPrefabPath);

        // Unit ÔøΩÔøΩ ÔøΩÔøΩÔøΩ
        if(selectedUIType == UIScriptType.Unit)
        {
            CreateScript(modelPath, createModelName, GenerateUnitModelCode(assetName));
            CreateScript(viewPath, createViewName, GenerateUnitCode(assetName));
        }
        // View, Popup ÔøΩÔøΩ ÔøΩÔøΩÔøΩ
        else
        {
            string controllerPath = string.Format(StringDefine.PATH_SCRIPT, $"HighLevel/Controller/{selectedUIType}");

            if (!string.IsNullOrEmpty(addPath))
                controllerPath = Path.Combine(controllerPath, addPath);

            CreateDirectoryIfNotExist(controllerPath);
            CreateScript(controllerPath, $"{assetName}Controller", GenerateControllerCode(createViewName, selectedUIType == UIScriptType.Popup));

            AddEnum(createViewName);

            CreateScript(modelPath, createModelName, GenerateModelCode(createViewName));
            CreateScript(viewPath, createViewName, GenerateViewCode(createViewName));
        }

        createPrefabPath = $"{Path.Combine(createPrefabPath, createViewName).Replace("\\", "/")}.prefab";

        CreatePrefab(createPrefabPath, createViewName);

        EditorPrefs.SetString("EDITOR_PREFS_KEY_CREATE_PREFAB_PATH", createPrefabPath);
        EditorPrefs.SetString("EDITOR_PREFS_KEY_ATTACH_SCRIPT_NAME", createViewName);
        EditorPrefs.SetInt("EDITOR_PREFS_KEY_CRETE_UI_TYPE", (int)selectedUIType);
    }

    public override void OnAfterReload()
    {
        string path = EditorPrefs.GetString("EDITOR_PREFS_KEY_CREATE_PREFAB_PATH");
        string scriptName = EditorPrefs.GetString("EDITOR_PREFS_KEY_ATTACH_SCRIPT_NAME");
        UIScriptType uiScriptType = (UIScriptType)EditorPrefs.GetInt("EDITOR_PREFS_KEY_ATTACH_SCRIPT_NAME");

        if (string.IsNullOrEmpty(path) ||
            string.IsNullOrEmpty(scriptName))
            return;

        Debug.Log($"AttachScriptToPrefab Start, path: {path}");

        AddScriptToPrefab(path, scriptName, uiScriptType);

        EditorPrefs.DeleteKey("EDITOR_PREFS_KEY_CREATE_PREFAB_PATH");
        EditorPrefs.DeleteKey("EDITOR_PREFS_KEY_ATTACH_SCRIPT_NAME");
    }

    public override void DrawScriptDeletor()
    {
        var uiTypes = Enum.GetValues(typeof(UIType));
        int uiCount = uiTypes.GetLength(0);

        if (uiCount == 0)
        {
            EditorGUILayout.HelpBox("ÏÇ≠Ï†úÌï† UI ÏöîÏÜåÍ∞Ä ÏóÜÏäµÎãàÎã§.", MessageType.Info);
            return;
        }

        EditorGUILayout.LabelField("UI Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÇ≠Ï†ú", EditorStyles.boldLabel);
        EditorGUILayout.HelpBox("Ï£ºÏùò: ÏÇ≠Ï†úÎêú UIÎäî Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.", MessageType.Warning);
        EditorGUILayout.Space();

        for (int i = 0; i < uiCount; i++)
        {
            UIType uiType = (UIType)uiTypes.GetValue(i);

            EditorGUILayout.BeginHorizontal("box");
            {
                EditorGUILayout.LabelField(uiType.ToString(), GUILayout.ExpandWidth(true));
                
                GUI.backgroundColor = Color.red;
                if (GUILayout.Button("ÏÇ≠Ï†ú", GUILayout.Width(60)))
                {
                    if (EditorUtility.DisplayDialog("ÌôïÏù∏", $"{uiType} Ïä§ÌÅ¨Î¶ΩÌä∏Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?", "ÏÇ≠Ï†ú", "Ï∑®ÏÜå"))
                    {
                        DeleteUI(uiType);
                    }
                }
                GUI.backgroundColor = Color.white;
            }
            EditorGUILayout.EndHorizontal();
        }
    }

    public override void DrawCustomOptions()
    {
        EditorGUILayout.LabelField("ÏòµÏÖò ÏÑ§Ï†ï", EditorStyles.boldLabel);
        
        EditorGUILayout.BeginVertical("helpbox");
        {
            selectedUIType = (UIScriptType)EditorGUILayout.EnumPopup("UI ÌÉÄÏûÖ ÏÑ†ÌÉù", selectedUIType);
            
            // UI ÌÉÄÏûÖÏóê Îî∞Î•∏ ÏÑ§Î™Ö Ï†úÍ≥µ
            string description = selectedUIType switch
            {
                UIScriptType.View => "View: Ï†ÑÏ≤¥ ÌôîÎ©¥ÏùÑ Ï∞®ÏßÄÌïòÎäî UI (Ïòà: Î©îÏù∏ Î©îÎâ¥, Í≤åÏûÑ ÌôîÎ©¥)",
                UIScriptType.Popup => "Popup: ÏûÑÏãúÎ°ú ÎÇòÌÉÄÎÇòÎäî UI (Ïòà: ÎåÄÌôîÏÉÅÏûê, ÏïåÎ¶ºÏ∞Ω)",
                UIScriptType.Unit => "Unit: Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏûëÏùÄ UI ÏöîÏÜå (Ïòà: Î¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú, Î≤ÑÌäº)",
                _ => ""
            };
            
            if (!string.IsNullOrEmpty(description))
            {
                EditorGUILayout.HelpBox(description, MessageType.Info);
            }
        }
        EditorGUILayout.EndVertical();
    }
    
    public override List<string> GetFinalPaths(string addPath, string assetName)
    {
        var paths = new List<string>();
        
        string modelPath = string.Format(StringDefine.PATH_SCRIPT, $"LowLevel/Model/{selectedUIType}");
        string viewPath = string.Format(StringDefine.PATH_SCRIPT, $"MiddleLevel/View/{selectedUIType}");
        string createPrefabPath = string.Format(StringDefine.PATH_VIEW_PREFAB, selectedUIType);
        string createViewName = $"{assetName}{selectedUIType}";
        string createModelName = $"{assetName}{selectedUIType}Model";
        
        if (!string.IsNullOrEmpty(addPath))
        {
            modelPath = Path.Combine(modelPath, addPath);
            viewPath = Path.Combine(viewPath, addPath);
            createPrefabPath = Path.Combine(createPrefabPath, addPath);
        }
        
        // Unit ÌÉÄÏûÖÏùÄ Îã§Î•∏ Íµ¨Ï°∞
        if (selectedUIType == UIScriptType.Unit)
        {
            paths.Add($"{modelPath.Replace("\\", "/")}{createModelName}.cs");
            paths.Add($"{viewPath.Replace("\\", "/")}{createViewName}.cs");
        }
        else
        {
            // View, Popup ÌÉÄÏûÖ
            string controllerPath = string.Format(StringDefine.PATH_SCRIPT, $"HighLevel/Controller/{selectedUIType}");
            if (!string.IsNullOrEmpty(addPath))
                controllerPath = Path.Combine(controllerPath, addPath);
            
            paths.Add($"{controllerPath.Replace("\\", "/")}{assetName}Controller.cs");
            paths.Add($"{modelPath.Replace("\\", "/")}{createModelName}.cs");
            paths.Add($"{viewPath.Replace("\\", "/")}{createViewName}.cs");
        }
        
        // ÌîÑÎ¶¨Ìåπ Í≤ΩÎ°ú
        paths.Add($"{createPrefabPath.Replace("\\", "/")}{createViewName}.prefab");
        
        return paths;
    }
    
    public override void DrawPathPreview(string addPath, string assetName)
    {
        EditorGUILayout.LabelField("ÏÉùÏÑ± Í≤ΩÎ°ú ÎØ∏Î¶¨Î≥¥Í∏∞", EditorStyles.boldLabel);
        
        EditorGUILayout.BeginVertical("helpbox");
        {
            var finalPaths = GetFinalPaths(addPath, assetName);
            
            if (finalPaths.Count == 0)
            {
                EditorGUILayout.HelpBox("ÏÉùÏÑ±Îê† ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§.", MessageType.Info);
            }
            else
            {
                EditorGUILayout.LabelField($"Ï¥ù {finalPaths.Count}Í∞ú ÌååÏùºÏù¥ ÏÉùÏÑ±Îê©ÎãàÎã§:", EditorStyles.miniLabel);
                EditorGUILayout.Space();
                
                foreach (string path in finalPaths)
                {
                    EditorGUILayout.BeginHorizontal();
                    {
                        string normalizedPath = path.Replace("\\", "/");
                        
                        // ÌååÏùº ÌÉÄÏûÖ ÏïÑÏù¥ÏΩò ÌëúÏãú
                        string fileType = Path.GetExtension(normalizedPath);
                        string icon = fileType switch
                        {
                            ".cs" => "cs Script Icon",
                            ".prefab" => "Prefab Icon", 
                            _ => "DefaultAsset Icon"
                        };
                        
                        GUIContent content = EditorGUIUtility.IconContent(icon);
                        EditorGUILayout.LabelField(content, GUILayout.Width(20), GUILayout.Height(16));
                        
                        EditorGUILayout.LabelField(normalizedPath, EditorStyles.miniLabel, GUILayout.ExpandWidth(true));
                        
                        // Ping Î≤ÑÌäº
                        string folderPath = Path.GetDirectoryName(normalizedPath);
                        if (GUILayout.Button("üìÅ", GUILayout.Width(25), GUILayout.Height(16)))
                        {
                            PingFolder(folderPath);
                        }
                    }
                    EditorGUILayout.EndHorizontal();
                }
                
                EditorGUILayout.Space();
                EditorGUILayout.HelpBox("üìÅ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Îãπ Ìè¥ÎçîÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.", MessageType.Info);
            }
        }
        EditorGUILayout.EndVertical();
        
        EditorGUILayout.Space();
    }

    private string GenerateModelCode(string name)
    {
        return $@"
public class {name}Model : BaseModel
{{
    
}}";
    }

    private string GenerateViewCode(string name)
    {
        return $@"
using UnityEngine;

public class {name} : BaseView<{name}Model>
{{

}}";
    }

    private string GenerateUnitModelCode(string name)
    {
        return $@"
public class {name}UnitModel : BaseModel
{{
    
}}";
    }

    private string GenerateUnitCode(string name)
    {
        return $@"
using UnityEngine;

public class {name}Unit : BaseUnit<{name}UnitModel>
{{

}}";
    }

    private string GenerateControllerCode(string name, bool isPopup)
    {
        return $@"
using UnityEngine;

public class {name}Controller : BaseController<{name}, {name}Model>
{{
    public override UIType UIType => UIType.{name};
    public override bool IsPopup => {(isPopup ? "true" : "false")};
}}";
    }

    private void CreatePrefab(string prefabPath, string name)
    {
        if (!File.Exists(prefabPath))
        {
            GameObject obj = new GameObject(name);
            obj.AddComponent<RectTransform>();
            PrefabUtility.SaveAsPrefabAsset(obj, prefabPath);
            DestroyImmediate(obj);

            AssetDatabase.Refresh();
        }
    }

    public void AddEnum(string insertLine)
    {
        List<string> lines = new List<string>(File.ReadAllLines(typeEnumPath));

        lines.Remove("public enum UIType");
        lines.Remove("{");
        lines.Remove("}");

        List<string> modifiedLines = new List<string>(lines)
        {
            $"    {insertLine},"
        };

        modifiedLines.Sort((item1, item2) =>
        {
            bool isFirstPopup = item1.Contains("Popup");
            bool isSecondPopup = item2.Contains("Popup");

            // ÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ UIÔøΩÔøΩ ÔøΩÔøΩÔøΩ
            if ((isFirstPopup && isSecondPopup) ||
            (!isFirstPopup && !isSecondPopup))
            {
                return item1.CompareTo(item2);
            }

            return isFirstPopup ? 1 : -1;
        });

        modifiedLines.Insert(0, "{");
        modifiedLines.Insert(0, "public enum UIType");
        modifiedLines.Add("}");

        File.WriteAllLines(typeEnumPath, modifiedLines);
        Debug.Log($"UI Ïó¥Í±∞Ìòï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {typeEnumPath}");
    }

    private void AddScriptToPrefab(string prefabPath, string scriptName, UIScriptType uiScriptType)
    {
        // ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩŒµÔøΩ
        GameObject prefab = AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath);
        if (prefab == null)
        {
            Debug.LogError($"ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ √£ÔøΩÔøΩ ÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩœ¥ÔøΩ: {prefabPath}");
            return;
        }

        // ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ∆Æ ≈∏ÔøΩÔøΩ √£ÔøΩÔøΩ
        Type scriptType = GetTypeFromUnityAssembly(scriptName, uiScriptType);
        if (scriptType == null)
        {
            Debug.LogError($"ÔøΩÔøΩ≈©ÔøΩÔøΩ∆Æ '{scriptName}'ÔøΩÔøΩ(ÔøΩÔøΩ) √£ÔøΩÔøΩ ÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩœ¥ÔøΩ.");
            return;
        }

        // ÔøΩÔøΩÔøΩÔøΩÔøΩ’øÔøΩ ÔøΩÔøΩ≈©ÔøΩÔøΩ∆Æ ÔøΩﬂ∞ÔøΩ (ÔøΩÃπÔøΩ ÔøΩﬂ∞ÔøΩÔøΩ«æÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩ)
        if (prefab.GetComponent(scriptType) == null)
        {
            GameObject instance = PrefabUtility.InstantiatePrefab(prefab) as GameObject;
            instance.AddComponent(scriptType);

            // ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩ ÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩ
            PrefabUtility.SaveAsPrefabAsset(instance, prefabPath);
            GameObject.DestroyImmediate(instance);

            Debug.Log($"'{scriptName}' ÔøΩÔøΩ≈©ÔøΩÔøΩ∆ÆÔøΩÔøΩ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ '{prefab.name}'ÔøΩÔøΩ ÔøΩﬂ∞ÔøΩÔøΩﬂΩÔøΩÔøΩœ¥ÔøΩ.");
        }
        else
        {
            Debug.Log($"ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ '{prefab.name}'ÔøΩÔøΩÔøΩÔøΩ ÔøΩÃπÔøΩ '{scriptName}' ÔøΩÔøΩ≈©ÔøΩÔøΩ∆ÆÔøΩÔøΩ ÔøΩﬂ∞ÔøΩÔøΩ«æÔøΩ ÔøΩ÷ΩÔøΩÔøΩœ¥ÔøΩ.");
        }
    }

    private void DeleteUI(UIType uiType)
    {
        bool isPopup = uiType.ToString().Contains("Popup");
        string uiTypeText = isPopup ? UIScriptType.Popup.ToString() : UIScriptType.View.ToString();
        string modelPath = string.Format(StringDefine.PATH_SCRIPT, $"LowLevel/Model/{uiTypeText}");
        string viewPath = string.Format(StringDefine.PATH_SCRIPT, $"MiddleLevel/View/{uiTypeText}");
        string controllerPath = string.Format(StringDefine.PATH_SCRIPT, $"HighLevel/Controller/{uiTypeText}");
        string prefabPath = string.Format(StringDefine.PATH_VIEW_PREFAB, uiTypeText);
        string originName = uiType.ToString().Replace(uiTypeText, "");

        DeleteFileInFolder($"{uiType}Model", "*.cs", modelPath);
        DeleteFileInFolder($"{uiType}", "*.cs", viewPath);
        DeleteFileInFolder($"{originName}Controller", "*.cs", controllerPath);
        DeleteFileInFolder($"{uiType}", "*.prefab", prefabPath);

        DeleteEnum(uiType.ToString());

        AssetDatabase.Refresh();
        AssetDatabase.SaveAssets();
    }

    private void DeleteEnum(string deleteType)
    {
        List<string> lines = new List<string>(File.ReadAllLines(typeEnumPath));
        List<string> modifiedLines = new List<string>();

        for (int i = 0; i < lines.Count; i++)
        {
            if (lines[i].Trim().Contains(deleteType))
                continue;

            modifiedLines.Add(lines[i]);
        }

        File.WriteAllLines(typeEnumPath, modifiedLines);
        Debug.Log($"UI Ïó¥Í±∞Ìòï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: {typeEnumPath}");
    }

    private Type GetTypeFromUnityAssembly(string typeName, UIScriptType uiScriptType)
    {
        var unityAssembly = uiScriptType == UIScriptType.Unit ? typeof(BaseUnit).Assembly : typeof(BaseView).Assembly; // UnityEngine ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ ÔøΩÀªÔøΩ
        var types = unityAssembly.GetTypes();

        return types.FirstOrDefault(t => t.Name == typeName);
    }
}