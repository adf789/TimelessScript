#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using System.Collections.Generic;
using System.Linq;
using TS.LowLevel.Data.Config;

namespace TS.EditorLevel.Editor.Tilemap
{
    /// <summary>
    /// ÌÉÄÏùºÎßµ Ìå®ÌÑ¥ Í≤ÄÏ¶ù ÎèÑÍµ¨
    /// Ìå®ÌÑ¥ Îç∞Ïù¥ÌÑ∞Ïùò Î¨¥Í≤∞ÏÑ±ÏùÑ Í≤ÄÏÇ¨ÌïòÍ≥† Î¨∏Ï†úÎ•º Î≥¥Í≥†
    /// </summary>
    public class TilemapPatternValidator : EditorWindow
    {
        private TilemapPatternRegistry _registry;
        private Vector2 _scrollPosition;
        private bool _showErrors = true;
        private bool _showWarnings = true;
        private bool _showInfo = true;

        private List<ValidationResult> _validationResults = new List<ValidationResult>();
        private GUIStyle _headerStyle;
        private GUIStyle _errorStyle;
        private GUIStyle _warningStyle;
        private GUIStyle _infoStyle;

        [MenuItem("TS/Tilemap/Pattern Validator")]
        public static void ShowWindow()
        {
            var window = GetWindow<TilemapPatternValidator>("Pattern Validator");
            window.minSize = new Vector2(500, 400);
            window.Show();
        }

        private void OnEnable()
        {
            // ÏûêÎèôÏúºÎ°ú Î†àÏßÄÏä§Ìä∏Î¶¨ Ï∞æÍ∏∞
            FindRegistry();
        }

        private void OnGUI()
        {
            InitializeStyles();

            DrawHeader();
            DrawRegistrySelection();
            DrawValidationControls();
            DrawValidationResults();
        }

        private void InitializeStyles()
        {
            if (_headerStyle == null)
            {
                _headerStyle = new GUIStyle(EditorStyles.boldLabel)
                {
                    fontSize = 14,
                    alignment = TextAnchor.MiddleLeft
                };

                _errorStyle = new GUIStyle(EditorStyles.helpBox)
                {
                    normal = { textColor = new Color(1f, 0.3f, 0.3f) }
                };

                _warningStyle = new GUIStyle(EditorStyles.helpBox)
                {
                    normal = { textColor = new Color(1f, 0.8f, 0f) }
                };

                _infoStyle = new GUIStyle(EditorStyles.helpBox)
                {
                    normal = { textColor = new Color(0.3f, 0.8f, 0.3f) }
                };
            }
        }

        private void DrawHeader()
        {
            EditorGUILayout.Space(10);
            EditorGUILayout.LabelField("Tilemap Pattern Validator", _headerStyle);
            EditorGUILayout.LabelField("Ìå®ÌÑ¥ Îç∞Ïù¥ÌÑ∞ Î¨¥Í≤∞ÏÑ± Í≤ÄÏÇ¨ ÎèÑÍµ¨", EditorStyles.miniLabel);
            EditorGUILayout.Space(5);
            EditorGUILayout.HelpBox(
                "Ìå®ÌÑ¥ ID Ï§ëÎ≥µ, Addressable Ï∞∏Ï°∞, Connection Ïú†Ìö®ÏÑ± Îì±ÏùÑ ÏûêÎèôÏúºÎ°ú Í≤ÄÏ¶ùÌï©ÎãàÎã§.",
                MessageType.Info
            );
            EditorGUILayout.Space(10);
        }

        private void DrawRegistrySelection()
        {
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField("Registry:", GUILayout.Width(70));
            _registry = (TilemapPatternRegistry)EditorGUILayout.ObjectField(
                _registry,
                typeof(TilemapPatternRegistry),
                false
            );

            if (GUILayout.Button("Find", GUILayout.Width(60)))
            {
                FindRegistry();
            }
            EditorGUILayout.EndHorizontal();

            if (_registry == null)
            {
                EditorGUILayout.HelpBox("Î†àÏßÄÏä§Ìä∏Î¶¨Î•º ÏÑ†ÌÉùÌïòÍ±∞ÎÇò 'Find' Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏûêÎèôÏúºÎ°ú Ï∞æÏúºÏÑ∏Ïöî.", MessageType.Warning);
            }

            EditorGUILayout.Space(5);
        }

        private void DrawValidationControls()
        {
            EditorGUILayout.BeginHorizontal();

            GUI.enabled = _registry != null;
            if (GUILayout.Button("üîç Validate All", GUILayout.Height(30)))
            {
                ValidateAll();
            }
            GUI.enabled = true;

            if (GUILayout.Button("Clear", GUILayout.Width(60), GUILayout.Height(30)))
            {
                _validationResults.Clear();
            }

            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);

            // ÌïÑÌÑ∞ ÏòµÏÖò
            EditorGUILayout.BeginHorizontal();
            _showErrors = GUILayout.Toggle(_showErrors, "‚ùå Errors", GUILayout.Width(80));
            _showWarnings = GUILayout.Toggle(_showWarnings, "‚ö†Ô∏è Warnings", GUILayout.Width(100));
            _showInfo = GUILayout.Toggle(_showInfo, "‚ÑπÔ∏è Info", GUILayout.Width(70));
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(10);
        }

        private void DrawValidationResults()
        {
            if (_validationResults.Count == 0)
            {
                EditorGUILayout.HelpBox("Í≤ÄÏ¶ù Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§. 'Validate All' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í≤ÄÏ¶ùÏùÑ ÏãúÏûëÌïòÏÑ∏Ïöî.", MessageType.Info);
                return;
            }

            // ÌÜµÍ≥Ñ ÌëúÏãú
            int errorCount = _validationResults.Count(r => r.Type == ValidationResultType.Error);
            int warningCount = _validationResults.Count(r => r.Type == ValidationResultType.Warning);
            int infoCount = _validationResults.Count(r => r.Type == ValidationResultType.Info);

            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.LabelField($"Total: {_validationResults.Count}", GUILayout.Width(100));
            if (errorCount > 0)
                EditorGUILayout.LabelField($"‚ùå {errorCount}", GUILayout.Width(60));
            if (warningCount > 0)
                EditorGUILayout.LabelField($"‚ö†Ô∏è {warningCount}", GUILayout.Width(60));
            if (infoCount > 0)
                EditorGUILayout.LabelField($"‚ÑπÔ∏è {infoCount}", GUILayout.Width(60));
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Space(5);

            // Í≤∞Í≥º Î™©Î°ù
            _scrollPosition = EditorGUILayout.BeginScrollView(_scrollPosition);

            foreach (var result in _validationResults)
            {
                if (!ShouldShowResult(result)) continue;

                GUIStyle style = GetStyleForType(result.Type);
                string icon = GetIconForType(result.Type);

                EditorGUILayout.BeginVertical(style);
                EditorGUILayout.LabelField($"{icon} {result.Message}", EditorStyles.wordWrappedLabel);

                if (!string.IsNullOrEmpty(result.Details))
                {
                    EditorGUILayout.LabelField(result.Details, EditorStyles.miniLabel);
                }

                if (result.RelatedObject != null)
                {
                    EditorGUILayout.ObjectField("Related:", result.RelatedObject, result.RelatedObject.GetType(), false);
                }

                EditorGUILayout.EndVertical();
                EditorGUILayout.Space(2);
            }

            EditorGUILayout.EndScrollView();
        }

        private bool ShouldShowResult(ValidationResult result)
        {
            return result.Type switch
            {
                ValidationResultType.Error => _showErrors,
                ValidationResultType.Warning => _showWarnings,
                ValidationResultType.Info => _showInfo,
                _ => true
            };
        }

        private GUIStyle GetStyleForType(ValidationResultType type)
        {
            return type switch
            {
                ValidationResultType.Error => _errorStyle,
                ValidationResultType.Warning => _warningStyle,
                ValidationResultType.Info => _infoStyle,
                _ => EditorStyles.helpBox
            };
        }

        private string GetIconForType(ValidationResultType type)
        {
            return type switch
            {
                ValidationResultType.Error => "‚ùå",
                ValidationResultType.Warning => "‚ö†Ô∏è",
                ValidationResultType.Info => "‚ÑπÔ∏è",
                _ => "‚Ä¢"
            };
        }

        private void FindRegistry()
        {
            string[] guids = AssetDatabase.FindAssets("t:TilemapPatternRegistry");
            if (guids.Length > 0)
            {
                string path = AssetDatabase.GUIDToAssetPath(guids[0]);
                _registry = AssetDatabase.LoadAssetAtPath<TilemapPatternRegistry>(path);
                Debug.Log($"[TilemapPatternValidator] Found registry: {path}");
            }
            else
            {
                Debug.LogWarning("[TilemapPatternValidator] No TilemapPatternRegistry found in project.");
            }
        }

        private void ValidateAll()
        {
            _validationResults.Clear();

            if (_registry == null)
            {
                AddResult(ValidationResultType.Error, "Î†àÏßÄÏä§Ìä∏Î¶¨Í∞Ä ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.", null);
                return;
            }

            AddResult(ValidationResultType.Info, $"Í≤ÄÏ¶ù ÏãúÏûë: {_registry.name}", _registry);

            ValidateDuplicateIDs();
            ValidateAddressableReferences();
            ValidateConnections();
            ValidateSubSceneMappings();
            ValidatePatternCategories();

            int errorCount = _validationResults.Count(r => r.Type == ValidationResultType.Error);
            int warningCount = _validationResults.Count(r => r.Type == ValidationResultType.Warning);

            if (errorCount == 0 && warningCount == 0)
            {
                AddResult(ValidationResultType.Info, "‚úÖ Î™®Îì† Í≤ÄÏ¶ù ÌÜµÍ≥º!", null);
            }
            else
            {
                AddResult(
                    ValidationResultType.Warning,
                    $"Í≤ÄÏ¶ù ÏôÑÎ£å: {errorCount} errors, {warningCount} warnings",
                    null
                );
            }

            Debug.Log($"[TilemapPatternValidator] Validation complete: {_validationResults.Count} results");
        }

        private void ValidateDuplicateIDs()
        {
            var idGroups = _registry.AllPatterns
                .Where(p => p != null)
                .GroupBy(p => p.PatternID)
                .Where(g => g.Count() > 1);

            foreach (var group in idGroups)
            {
                AddResult(
                    ValidationResultType.Error,
                    $"Ï§ëÎ≥µÎêú PatternID: '{group.Key}'",
                    $"{group.Count()}Í∞úÏùò Ìå®ÌÑ¥Ïù¥ Í∞ôÏùÄ IDÎ•º ÏÇ¨Ïö©ÌïòÍ≥† ÏûàÏäµÎãàÎã§.",
                    group.First()
                );
            }
        }

        private void ValidateAddressableReferences()
        {
            foreach (var pattern in _registry.AllPatterns)
            {
                if (pattern == null) continue;

                if (pattern.TilemapPrefab == null || !pattern.TilemapPrefab.RuntimeKeyIsValid())
                {
                    AddResult(
                        ValidationResultType.Warning,
                        $"Ìå®ÌÑ¥ '{pattern.PatternID}': Addressable Ï∞∏Ï°∞Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.",
                        "TilemapPrefabÏù¥ nullÏù¥Í±∞ÎÇò Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Addressable ÌÇ§ÏûÖÎãàÎã§.",
                        pattern
                    );
                }
            }
        }

        private void ValidateConnections()
        {
            foreach (var pattern in _registry.AllPatterns)
            {
                if (pattern == null) continue;

                foreach (var connection in pattern.Connections)
                {
                    foreach (var nextPatternID in connection.ValidNextPatterns)
                    {
                        if (string.IsNullOrEmpty(nextPatternID))
                        {
                            AddResult(
                                ValidationResultType.Warning,
                                $"Ìå®ÌÑ¥ '{pattern.PatternID}': Îπà Ïó∞Í≤∞ Ìå®ÌÑ¥ ID",
                                $"{connection.Direction} Î∞©Ìñ•Ïùò ValidNextPatternsÏóê Îπà Î¨∏ÏûêÏó¥Ïù¥ ÏûàÏäµÎãàÎã§.",
                                pattern
                            );
                            continue;
                        }

                        if (!_registry.AllPatterns.Any(p => p != null && p.PatternID == nextPatternID))
                        {
                            AddResult(
                                ValidationResultType.Error,
                                $"Ìå®ÌÑ¥ '{pattern.PatternID}': Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Ïó∞Í≤∞ Ìå®ÌÑ¥ '{nextPatternID}'",
                                $"{connection.Direction} Î∞©Ìñ•ÏúºÎ°ú Ïó∞Í≤∞Îêú Ìå®ÌÑ¥Ïù¥ Î†àÏßÄÏä§Ìä∏Î¶¨Ïóê ÏóÜÏäµÎãàÎã§.",
                                pattern
                            );
                        }
                    }
                }
            }
        }

        private void ValidateSubSceneMappings()
        {
            foreach (var mapping in _registry.InitialMappings)
            {
                if (string.IsNullOrEmpty(mapping.SubSceneName))
                {
                    AddResult(
                        ValidationResultType.Warning,
                        "SubScene Îß§Ìïë: Îπà SubSceneName",
                        "SubScene Ïù¥Î¶ÑÏù¥ ÎπÑÏñ¥ÏûàÎäî Îß§ÌïëÏù¥ ÏûàÏäµÎãàÎã§.",
                        null
                    );
                    continue;
                }

                foreach (var pattern in mapping.InitialPatterns)
                {
                    if (pattern == null)
                    {
                        AddResult(
                            ValidationResultType.Warning,
                            $"SubScene '{mapping.SubSceneName}': null Ìå®ÌÑ¥ Ï∞∏Ï°∞",
                            "InitialPatternsÏóê null Ï∞∏Ï°∞Í∞Ä ÏûàÏäµÎãàÎã§.",
                            null
                        );
                    }
                }

                if (mapping.InitialPatterns.Count == 0)
                {
                    AddResult(
                        ValidationResultType.Info,
                        $"SubScene '{mapping.SubSceneName}': Ï¥àÍ∏∞ Ìå®ÌÑ¥Ïù¥ ÏóÜÏäµÎãàÎã§.",
                        "Ïù¥ SubSceneÏùÄ ÌÉÄÏùºÎßµ Ìå®ÌÑ¥ÏùÑ Î°úÎìúÌïòÏßÄ ÏïäÏäµÎãàÎã§.",
                        null
                    );
                }
            }
        }

        private void ValidatePatternCategories()
        {
            foreach (var category in _registry.Categories)
            {
                if (string.IsNullOrEmpty(category.CategoryName))
                {
                    AddResult(
                        ValidationResultType.Warning,
                        "Ïπ¥ÌÖåÍ≥†Î¶¨: Îπà Ïù¥Î¶Ñ",
                        "Ïù¥Î¶ÑÏù¥ ÎπÑÏñ¥ÏûàÎäî Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏûàÏäµÎãàÎã§.",
                        null
                    );
                }

                foreach (var pattern in category.Patterns)
                {
                    if (pattern == null)
                    {
                        AddResult(
                            ValidationResultType.Warning,
                            $"Ïπ¥ÌÖåÍ≥†Î¶¨ '{category.CategoryName}': null Ìå®ÌÑ¥ Ï∞∏Ï°∞",
                            null,
                            null
                        );
                    }
                }
            }
        }

        private void AddResult(ValidationResultType type, string message, Object relatedObject)
        {
            AddResult(type, message, null, relatedObject);
        }

        private void AddResult(ValidationResultType type, string message, string details, Object relatedObject)
        {
            _validationResults.Add(new ValidationResult
            {
                Type = type,
                Message = message,
                Details = details,
                RelatedObject = relatedObject
            });
        }

        private class ValidationResult
        {
            public ValidationResultType Type;
            public string Message;
            public string Details;
            public Object RelatedObject;
        }

        private enum ValidationResultType
        {
            Error,
            Warning,
            Info
        }
    }
}
#endif
